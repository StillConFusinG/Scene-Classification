% 参数准备
f=1/100 ;
net.layers = {} ;
%% part1
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(11,11,3,64, 'single'), zeros(64, 1, 'single')}}, ...
    'stride', 4, ...
    'pad', 0, ...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'lrn',...
    'param', [5,2,0.0001,0.75]) ;
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', [0,1,0,1]) ;
%% part2
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(5,5,64,256, 'single'), zeros(256, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', [2,2,2,2], ...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'lrn',...
    'param', [5,2,0.0001,0.75]) ;
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', [0,1,0,1]) ;
%% part3
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(3,3,256,256, 'single'), zeros(256, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', [1,1,1,1], ...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(3,3,256,256, 'single'), zeros(256, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', [1,1,1,1], ...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(3,3,256,256, 'single'), zeros(256, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', [1,1,1,1], ...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [3 3], ...
    'stride', 2, ...
    'pad', [0,1,0,1]) ;
%% part4
% 全连接层
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(6,6,256,4096, 'single'), zeros(4096, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', 0,...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(1,1,4096,4096, 'single'), zeros(4096, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', 0,...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{f*randn(1,1,4096,7, 'single'), zeros(7, 1, 'single')}}, ...
    'stride', 1, ...
    'pad', 0,...
    'dilate',1) ;
net.layers{end+1} = struct('type', 'softmaxloss') ;

%% 生成网络
net = vl_simplenn_tidy(net) ;